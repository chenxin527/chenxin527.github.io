<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown 学习笔记第二版</title>
    <url>/blog/2022/08/03/1d8ff3c8.html</url>
    <content><![CDATA[<link href="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/KaTeX/0.10.2/katex.min.css" rel="stylesheet">
<span id="more"></span>
<h1 id="总目录"><a class="markdownIt-Anchor" href="#总目录"></a> 总目录</h1>
<p><ul class="markdownIt-TOC">
<li><a href="#%E8%BF%99%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98">这是二级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98">这是三级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98">这是四级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E4%BA%94%E7%BA%A7%E6%A0%87%E9%A2%98">这是五级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E5%85%AD%E7%BA%A7%E6%A0%87%E9%A2%98">这是六级标题</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%BF%99%E4%B9%9F%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98">这也是二级标题</a></li>
<li><a href="#%E6%A0%87%E9%A2%981">标题1</a>
<ul>
<li><a href="#%E6%A0%87%E9%A2%9811">标题1.1</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E9%A2%982">标题2</a>
<ul>
<li><a href="#%E6%A0%87%E9%A2%9821">标题2.1</a></li>
<li><a href="#%E6%A0%87%E9%A2%9822">标题2.2</a></li>
</ul>
</li>
<li><a href="#%E7%B2%97%E4%BD%93">粗体</a></li>
<li><a href="#%E6%96%9C%E4%BD%93">斜体</a></li>
<li><a href="#%E6%B2%A1%E6%9C%89%E7%A9%BA%E8%A1%8C">没有空行</a></li>
<li><a href="#%E6%9C%89%E7%A9%BA%E8%A1%8C">有空行</a></li>
<li><a href="#%E6%AE%B5%E5%86%85%E6%8D%A2%E8%A1%8C">段内换行</a></li>
<li><a href="#%E7%A9%BA%E8%A1%8C">空行</a></li>
<li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">有序列表</a></li>
<li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8">无序列表</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%98%9F%E5%8F%B7">使用星号</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%8F%B7">使用加号</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%87%8F%E5%8F%B7">使用减号</a></li>
</ul>
</li>
<li><a href="#%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8">嵌套列表</a></li>
<li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8%E4%B8%8E%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E7%9B%B8%E4%BA%92%E5%B5%8C%E5%A5%97">有序列表与无序列表相互嵌套</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90">推荐</a></li>
<li><a href="#%E4%B8%8D%E6%8E%A8%E8%8D%90">不推荐</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90-2">推荐</a></li>
<li><a href="#%E4%B8%8D%E6%8E%A8%E8%8D%90-2">不推荐</a></li>
<li><a href="#%E5%88%86%E9%9A%94%E7%BA%BF">分隔线</a>
<ul>
<li><a href="#%E6%98%9F%E5%8F%B7">星号</a></li>
<li><a href="#%E5%87%8F%E5%8F%B7">减号</a></li>
<li><a href="#%E4%B8%8B%E5%88%92%E7%BA%BF">下划线</a></li>
</ul>
</li>
<li><a href="#%E5%9B%BE%E7%89%87">图片</a>
<ul>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E5%9B%BE%E7%89%87%E6%9B%BF%E4%BB%A3%E6%96%87%E5%AD%97">本地图片:无图片替代文字</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%9C%89%E5%9B%BE%E7%89%87%E6%9B%BF%E4%BB%A3%E6%96%87%E5%AD%97">本地图片:有图片替代文字</a></li>
</ul>
</li>
<li><a href="#%E9%93%BE%E6%8E%A5">链接</a>
<ul>
<li><a href="#%E6%96%87%E5%AD%97%E9%93%BE%E6%8E%A5">文字链接</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E9%93%BE%E6%8E%A5">引用链接</a></li>
<li><a href="#%E7%BD%91%E5%9D%80%E9%93%BE%E6%8E%A5">网址链接</a></li>
</ul>
</li>
<li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97">行内代码与代码块</a>
<ul>
<li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81">行内代码</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块</a></li>
</ul>
</li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a>
<ul>
<li><a href="#%E5%A4%9A%E8%A1%8C%E5%BC%95%E7%94%A8">多行引用</a></li>
<li><a href="#%E5%A4%9A%E8%A1%8C%E5%BC%95%E7%94%A8-2">多行引用</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E4%B8%AD%E5%B5%8C%E5%A5%97%E5%BC%95%E7%94%A8">引用中嵌套引用</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96-markdown-%E6%A0%87%E8%AE%B0">引用中使用其他 markdown 标记</a></li>
</ul>
</li>
<li><a href="#%E8%BD%AC%E4%B9%89">转义</a></li>
<li><a href="#%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95">扩展语法</a>
<ul>
<li><a href="#%E5%88%A0%E9%99%A4%E7%BA%BF">删除线</a></li>
<li><a href="#%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7">表情符号</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E9%93%BE%E6%8E%A5">自动链接</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC">表格</a>
<ul>
<li><a href="#%E8%A1%A8%E6%A0%BC%E6%A0%BC%E5%BC%8F">表格格式</a></li>
<li><a href="#%E5%AF%B9%E9%BD%90%E6%A0%BC%E5%BC%8F">对齐格式</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC%E5%86%85%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E6%A0%87%E8%AE%B0">表格内使用其他标记</a></li>
</ul>
</li>
<li><a href="#%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8">任务列表</a></li>
<li><a href="#%E5%9B%B4%E6%A0%8F%E4%BB%A3%E7%A0%81%E5%9D%97">围栏代码块</a></li>
<li><a href="#%E9%94%9A%E7%82%B9">锚点</a></li>
<li><a href="#%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93-%E5%A4%A7%E5%B0%8F-%E9%A2%9C%E8%89%B2">更改字体、大小、颜色</a></li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a></li>
<li><a href="#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">数学公式</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E6%96%87%E4%BB%B6">引用文件</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87">引用图片</a></li>
<li><a href="#%E5%B9%BB%E7%81%AF%E7%89%87">幻灯片</a></li>
<li><a href="#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%AD%E5%8A%A0%E5%85%A5%E7%A9%BA%E6%A0%BC">数学公式中加入空格</a></li>
<li><a href="#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%85%AC%E5%BC%8F">大括号公式</a></li>
<li><a href="#%E6%B3%A8%E9%87%8A">注释</a></li>
<li><a href="#%E6%8D%A2%E8%A1%8C-%E7%A9%BA%E8%A1%8C">换行 (空行)</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="这是一级标题"><a class="markdownIt-Anchor" href="#这是一级标题"></a> 这是一级标题</h1>
<h2 id="这是二级标题"><a class="markdownIt-Anchor" href="#这是二级标题"></a> 这是二级标题</h2>
<h3 id="这是三级标题"><a class="markdownIt-Anchor" href="#这是三级标题"></a> 这是三级标题</h3>
<h4 id="这是四级标题"><a class="markdownIt-Anchor" href="#这是四级标题"></a> 这是四级标题</h4>
<h5 id="这是五级标题"><a class="markdownIt-Anchor" href="#这是五级标题"></a> 这是五级标题</h5>
<h6 id="这是六级标题"><a class="markdownIt-Anchor" href="#这是六级标题"></a> 这是六级标题</h6>
<h1 id="这也是一级标题"><a class="markdownIt-Anchor" href="#这也是一级标题"></a> 这也是一级标题</h1>
<h2 id="这也是二级标题"><a class="markdownIt-Anchor" href="#这也是二级标题"></a> 这也是二级标题</h2>
<h1 id="文档标题"><a class="markdownIt-Anchor" href="#文档标题"></a> 文档标题</h1>
<p>作者</p>
<p>摘要</p>
<p>目录</p>
<h2 id="标题1"><a class="markdownIt-Anchor" href="#标题1"></a> 标题1</h2>
<h3 id="标题11"><a class="markdownIt-Anchor" href="#标题11"></a> 标题1.1</h3>
<h2 id="标题2"><a class="markdownIt-Anchor" href="#标题2"></a> 标题2</h2>
<h3 id="标题21"><a class="markdownIt-Anchor" href="#标题21"></a> 标题2.1</h3>
<h3 id="标题22"><a class="markdownIt-Anchor" href="#标题22"></a> 标题2.2</h3>
<h2 id="粗体"><a class="markdownIt-Anchor" href="#粗体"></a> 粗体</h2>
<p>我是<strong>粗体</strong></p>
<p>我也是 <strong>粗体</strong></p>
<h2 id="斜体"><a class="markdownIt-Anchor" href="#斜体"></a> 斜体</h2>
<p>我是<em>斜体</em></p>
<p>我也是 <em>斜体</em></p>
<h2 id="没有空行"><a class="markdownIt-Anchor" href="#没有空行"></a> 没有空行</h2>
<p>我是第一行
我是第二行</p>
<h2 id="有空行"><a class="markdownIt-Anchor" href="#有空行"></a> 有空行</h2>
<p>我是第一行</p>
<p>我是第二行</p>
<h2 id="段内换行"><a class="markdownIt-Anchor" href="#段内换行"></a> 段内换行</h2>
<p>我是第一行，如果想段内换行需要在结尾插入两个以上的空格<br>
我是第二行</p>
<h2 id="空行"><a class="markdownIt-Anchor" href="#空行"></a> 空行</h2>
<p>空行符&lt;br&gt;</p>
<p>大家好，本文参考的是:
<a href="https://github.com/google/styleguide/blog/gh-pages/docguide/style.md">Google Markdown Style Guide</a></p>
<p>大家好，本文参考的是：<a href="https://github.com/google/styleguide/blog/gh-pages/docguide/style.md">Google Markdown Style Guide</a></p>
<h2 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h2>
<ol>
<li>我有一个梦想</li>
<li>我有两个梦想</li>
<li>我有三个梦想</li>
</ol>
<h2 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h2>
<h3 id="使用星号"><a class="markdownIt-Anchor" href="#使用星号"></a> 使用星号</h3>
<ul>
<li>使用【星号】标识无序列表</li>
<li>使用【星号】标识无序列表</li>
<li>使用【星号】标识无序列表</li>
</ul>
<h3 id="使用加号"><a class="markdownIt-Anchor" href="#使用加号"></a> 使用加号</h3>
<ul>
<li>使用【加号】标识无序列表</li>
<li>使用【加号】标识无序列表</li>
<li>使用【加号】标识无序列表</li>
</ul>
<h3 id="使用减号"><a class="markdownIt-Anchor" href="#使用减号"></a> 使用减号</h3>
<ul>
<li>使用【减号】标识无序列表</li>
<li>使用【减号】标识无序列表</li>
<li>使用【减号】标识无序列表</li>
</ul>
<h2 id="嵌套列表"><a class="markdownIt-Anchor" href="#嵌套列表"></a> 嵌套列表</h2>
<ul>
<li>这是第一层列表
<ul>
<li>这是第二层列表
<ul>
<li>这是第三层列表
<ul>
<li>这是第四层列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="有序列表与无序列表相互嵌套"><a class="markdownIt-Anchor" href="#有序列表与无序列表相互嵌套"></a> 有序列表与无序列表相互嵌套</h2>
<ol>
<li>我是一层列表
<ul>
<li>我是二层列表
<ol>
<li>我是三层列表</li>
<li>我也是三层列表</li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li>
<p>这个列表项<br>
有换行</p>
</li>
<li>
<p>这个没有</p>
</li>
</ul>
<ol>
<li>
<p>这个有序列表项<br>
有换行</p>
</li>
<li>
<p>这个没有</p>
</li>
</ol>
<ul>
<li>抽烟</li>
<li>喝酒</li>
<li>烫头</li>
</ul>
<h2 id="推荐"><a class="markdownIt-Anchor" href="#推荐"></a> 推荐</h2>
<ul>
<li>
<p>抽很多的<br>
烟</p>
</li>
<li>
<p>喝酒</p>
</li>
<li>
<p>烫头</p>
</li>
</ul>
<h2 id="不推荐"><a class="markdownIt-Anchor" href="#不推荐"></a> 不推荐</h2>
<ul>
<li>抽很多的<br>
烟</li>
<li>喝酒</li>
<li>烫头</li>
</ul>
<h2 id="推荐-2"><a class="markdownIt-Anchor" href="#推荐-2"></a> 推荐</h2>
<p>我的爱好</p>
<ul>
<li>抽烟</li>
<li>喝酒</li>
<li>烫头</li>
</ul>
<p>跟于老师是一样的</p>
<h2 id="不推荐-2"><a class="markdownIt-Anchor" href="#不推荐-2"></a> 不推荐</h2>
<p>我的爱好</p>
<ul>
<li>抽烟</li>
<li>喝酒</li>
<li>烫头
跟于老师是一样的</li>
</ul>
<h2 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h2>
<h3 id="星号"><a class="markdownIt-Anchor" href="#星号"></a> 星号</h3>
<hr>
<hr>
<hr>
<h3 id="减号"><a class="markdownIt-Anchor" href="#减号"></a> 减号</h3>
<hr>
<hr>
<hr>
<h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3>
<hr>
<hr>
<hr>
<h2 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h2>
<h3 id="本地图片无图片替代文字"><a class="markdownIt-Anchor" href="#本地图片无图片替代文字"></a> 本地图片:无图片替代文字</h3>
<p><img src="/blog/blog/2022/08/03/1d8ff3c8/example.jpg" alt></p>
<h3 id="本地图片有图片替代文字"><a class="markdownIt-Anchor" href="#本地图片有图片替代文字"></a> 本地图片:有图片替代文字</h3>
<p><img src="/blog/blog/2022/08/03/1d8ff3c8/example.jpg" alt="本地图片"></p>
<h2 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h2>
<h3 id="文字链接"><a class="markdownIt-Anchor" href="#文字链接"></a> 文字链接</h3>
<p>在日常工作中我们经常使用的网址有<a href="https://www.google.com/">Google</a>、<a href="https://github.com/">Github</a>和<a href="https://stackoverflow.com/?utm_source=rss&amp;utm_medium=rss">Stack overflow</a></p>
<h3 id="引用链接"><a class="markdownIt-Anchor" href="#引用链接"></a> 引用链接</h3>
<p>在日常工作中我们经常使用的网址有<a href="https://www.google.com/">Google</a>、<a href="https://github.com/">Github</a>和<a href="https://stackoverflow.com/?utm_source=rss&amp;utm_medium=rss">Stack overflow</a></p>
<p>在正文中引用链接标记，可以理解为引用定义好的变量：</p>
<p><a href="https://www.google.com/">谷歌官网</a></p>
<p>在底部定义链接标记，可以理解为定义一个地址变量：</p>
<h3 id="网址链接"><a class="markdownIt-Anchor" href="#网址链接"></a> 网址链接</h3>
<p><a href="https://www.google.com/">https://www.google.com/</a></p>
<p><a href="mailto:wirelessqa@163.com">wirelessqa@163.com</a></p>
<h2 id="行内代码与代码块"><a class="markdownIt-Anchor" href="#行内代码与代码块"></a> 行内代码与代码块</h2>
<h3 id="行内代码"><a class="markdownIt-Anchor" href="#行内代码"></a> 行内代码</h3>
<p>使用<code>cd..</code>命令切换到上一级目录。</p>
<p>这是一个<code>行内代码</code></p>
<p><sub>行内代码不能有空格</sub> (?可以有)</p>
<h3 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h3>
<p>以Tab键开头：</p>
<pre><code class="hljs">This_is_a_code_bkock()
</code></pre>
<p>或者以4个空格开头：</p>
<pre><code class="hljs">This_is_a_code_block()
</code></pre>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME <span class="hljs-string">&quot;WuWangwang&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADDR <span class="hljs-string">&quot;An Shun, Gui Zhou&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name: %s\n&quot;</span>,NAME);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address: %s\n&quot;</span>,ADDR);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<pre><code class="hljs">#include&lt;stdio.h&gt;
#define NAME &quot;WuWangwang&quot;
#define ADDR &quot;An Shun, Gui Zhou&quot;

int main()
&#123;
    printf(&quot;Name: %s\n&quot;,NAME);
    printf(&quot;Address: %s\n&quot;,ADDR);

    return 0;
&#125;
</code></pre>
<h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2>
<blockquote>
<p>我是引用的句子，请在我的前面加上&gt;(大于号)</p>
</blockquote>
<p>正常的句子是这样的</p>
<h3 id="多行引用"><a class="markdownIt-Anchor" href="#多行引用"></a> 多行引用</h3>
<blockquote>
<p>这是多行引用的第一行，我的最后有两个空格。<br>
这是多行引用的第二行</p>
</blockquote>
<h3 id="多行引用-2"><a class="markdownIt-Anchor" href="#多行引用-2"></a> 多行引用</h3>
<blockquote>
<p>这是多行引用的第一行</p>
<p>这是多行引用的第二行</p>
</blockquote>
<h3 id="引用中嵌套引用"><a class="markdownIt-Anchor" href="#引用中嵌套引用"></a> 引用中嵌套引用</h3>
<blockquote>
<p>引用中是可以嵌套引用的</p>
<blockquote>
<p>我是引用中嵌套的引用</p>
</blockquote>
</blockquote>
<h3 id="引用中使用其他-markdown-标记"><a class="markdownIt-Anchor" href="#引用中使用其他-markdown-标记"></a> 引用中使用其他 markdown 标记</h3>
<blockquote>
<p>来点击查看我的<a href="http://www.weibo.com">微博</a>
<strong>加粗</strong>和<em>斜体</em>也是支持的。</p>
</blockquote>
<h2 id="转义"><a class="markdownIt-Anchor" href="#转义"></a> 转义</h2>
<p>\
*
#
+
-
.
!
~
_
{}
[]
()</p>
<h2 id="扩展语法"><a class="markdownIt-Anchor" href="#扩展语法"></a> 扩展语法</h2>
<h3 id="删除线"><a class="markdownIt-Anchor" href="#删除线"></a> 删除线</h3>
<p>这是<s>删除线</s></p>
<p>这是<s>删除线删除线<br>
删除线删除线</s></p>
<h3 id="表情符号"><a class="markdownIt-Anchor" href="#表情符号"></a> 表情符号</h3>
<p>😄
😆
👍
👎
👏
😧
😙</p>
<p>更多的表情符号请参考<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/">http://www.webpagefx.com/tools/emoji-cheat-sheet/</a></p>
<h3 id="自动链接"><a class="markdownIt-Anchor" href="#自动链接"></a> 自动链接</h3>
<p>标准语法中由 &lt;&gt; 包裹的 URL 地址被自动识别并解析为超链接。</p>
<p>如：</p>
<p><a href="http://www.baidu.com">http://www.baidu.com</a></p>
<p>使用 GFM 扩展语法可以不使用 &lt;&gt; 包裹</p>
<p>如：</p>
<p>www.baidu.com</p>
<p>http://baidu.com</p>
<p>http://www.baidu.com</p>
<h3 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h3>
<h4 id="表格格式"><a class="markdownIt-Anchor" href="#表格格式"></a> 表格格式</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>标题</th>
<th>网址</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>博客</td>
<td>http://blog.csdn.net/wirelessqa</td>
</tr>
<tr>
<td>02</td>
<td>微博</td>
<td>http://www.weibo.com/wirelessqa</td>
</tr>
</tbody>
</table>
<h4 id="对齐格式"><a class="markdownIt-Anchor" href="#对齐格式"></a> 对齐格式</h4>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:center">居中对齐</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">01</td>
<td style="text-align:center">博客</td>
<td style="text-align:right">http://blog.csdn.net/wirelessqa</td>
</tr>
<tr>
<td style="text-align:left">02</td>
<td style="text-align:center">微博</td>
<td style="text-align:right">http://www.weibo.com/wirelessqa</td>
</tr>
</tbody>
</table>
<h4 id="表格内使用其他标记"><a class="markdownIt-Anchor" href="#表格内使用其他标记"></a> 表格内使用其他标记</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>标题</th>
<th>网址</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>01</em></td>
<td><a href="http://blog.csdn.net/wirelessqa">博客</a></td>
<td>http://blog.csdn.net/wirelessqa</td>
</tr>
<tr>
<td><strong>02</strong></td>
<td><a href="http://www.weibo.com/wirelessqa">微博</a></td>
<td>http://www.weibo.com/wirelessqa</td>
</tr>
</tbody>
</table>
<p>人员列表：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
</tr>
</tbody>
</table>
<p>好多熟悉的名字</p>
<h3 id="任务列表"><a class="markdownIt-Anchor" href="#任务列表"></a> 任务列表</h3>
<p>今日工作：</p>
<ul>
<li>[x] 吃</li>
<li>[x] 喝</li>
<li>[ ] 玩</li>
</ul>
<p>明日计划：</p>
<ul>
<li>[ ] 吃
<ul>
<li>[ ] 吃鱼</li>
<li>[ ] 吃瓜</li>
</ul>
</li>
<li>[x] 睡</li>
</ul>
<h3 id="围栏代码块"><a class="markdownIt-Anchor" href="#围栏代码块"></a> 围栏代码块</h3>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_print</span>():<br>    pass<br></code></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_print</span>():<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>
<p>进入C语言代码块：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>优秀！</p>
<h3 id="锚点"><a class="markdownIt-Anchor" href="#锚点"></a> 锚点</h3>
<p>目录</p>
<ul>
<li><a href="#%E5%AF%B9%E9%BD%90%E6%A0%BC%E5%BC%8F">对齐格式</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC%E5%86%85%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E6%A0%87%E8%AE%B0">表格内使用其他标记</a></li>
</ul>
<h3 id="更改字体-大小-颜色"><a class="markdownIt-Anchor" href="#更改字体-大小-颜色"></a> 更改字体、大小、颜色</h3>
<p><font face="黑体">我是黑体</font></p>
<p><font face="STCAIYUN">我是华文彩云</font></p>
<p><font face="微软雅黑">我是微软雅黑</font></p>
<p><font color="red">我是红色</font></p>
<p><font color="#008000">我是绿色</font></p>
<p><font color="Blue">我是蓝色</font></p>
<p><font size="5">我是尺寸</font></p>
<p><font face="华文彩云" color="purple" size="5">我是华文彩云，蓝色，字号为5</font></p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<ul>
<li>分页</li>
</ul>
<p>在需要分页的地方插入以下代码：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> style=<span class="hljs-string">&quot;page-break-after:always;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure>
<p>分页效果在导出的PDF文件中体现。</p>
<h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3>
<p>快捷键：Ctrl + M</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2+b^2=c^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y = x + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msqrt><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sqrt{3x-1}+(1+x)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.17444499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8655550000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.825555em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.17444499999999996em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="引用文件"><a class="markdownIt-Anchor" href="#引用文件"></a> 引用文件</h3>
<blockquote>
<p>@import &quot;文件名</p>
</blockquote>
<blockquote>
<p>&lt;!-- @import “文件名” --&gt;</p>
</blockquote>
<p>以下是文件引用:
@import “pasteimage.md”</p>
<p>文件引用到此结束</p>
<hr>
<p>@import “https://github.com/kennethreitz/responder/blod/master/README.md”</p>
<h3 id="引用图片"><a class="markdownIt-Anchor" href="#引用图片"></a> 引用图片</h3>
<ul>
<li>
<p>直接引用图片
@import “picture/exp11.png”</p>
</li>
<li>
<p>在引用图片的同时设置图片的大小(好像没用。。。尴尬。)
@import “picture/example.jpg” (width=“10px” height=“20px” title=“哈哈哈” alt=“这是哈哈哈哈哈哈”)</p>
</li>
</ul>
<h3 id="幻灯片"><a class="markdownIt-Anchor" href="#幻灯片"></a> 幻灯片</h3>
<blockquote>
<!-- slide -->
<h1 id="第-1-页"><a class="markdownIt-Anchor" href="#第-1-页"></a> 第 1 页</h1>
<p>猜猜我是谁？</p>
<!-- slide -->
<h1 id="第-2-页"><a class="markdownIt-Anchor" href="#第-2-页"></a> 第 2 页</h1>
<p><img src="/blog/blog/2022/08/03/1d8ff3c8/example.jpg" alt>
哈哈哈哈哈，我 giao！</p>
</blockquote>
<h3 id="数学公式中加入空格"><a class="markdownIt-Anchor" href="#数学公式中加入空格"></a> 数学公式中加入空格</h3>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">没</mi><mi mathvariant="normal">有</mi><mi mathvariant="normal">空</mi><mi mathvariant="normal">格</mi></mrow><annotation encoding="application/x-tex">这里没有    空格</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">没</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">格</span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">有</mi><mtext> </mtext><mi mathvariant="normal">空</mi><mi mathvariant="normal">格</mi></mrow><annotation encoding="application/x-tex">这里有 \, 空格</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">有</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">格</span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">有</mi><mtext>  </mtext><mi mathvariant="normal">空</mi><mi mathvariant="normal">格</mi></mrow><annotation encoding="application/x-tex">这里有 \; 空格</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">有</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">格</span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">有</mi><mspace width="1em"><mi mathvariant="normal">空</mi><mi mathvariant="normal">格</mi></mspace></mrow><annotation encoding="application/x-tex">这里有 \quad 空格</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">有</span><span class="mspace" style="margin-right:1em;"></span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">格</span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">有</mi><mspace width="2em"><mi mathvariant="normal">空</mi><mi mathvariant="normal">格</mi></mspace></mrow><annotation encoding="application/x-tex">这里有 \qquad 空格</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">有</span><span class="mspace" style="margin-right:2em;"></span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">格</span></span></span></span></p>
</li>
</ul>
<h3 id="大括号公式"><a class="markdownIt-Anchor" href="#大括号公式"></a> 大括号公式</h3>
<ul>
<li><strong>方法一：</strong></li>
</ul>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left right" columnspacing="0em 1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>z</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>x</mi><mi>y</mi></mfrac></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> f(x)=\left\{
\begin{aligned}
x &amp; = &amp; \cos(t) \\
y &amp; = &amp; \sin(t) \\
z &amp; = &amp; \frac xy
\end{aligned}
\right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.288000000000001em;vertical-align:-2.394000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65002em;"><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.894em;"><span style="top:-5.161560000000001em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.6615599999999997em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8939999999999995em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.394000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.894em;"><span style="top:-5.161560000000001em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-3.6615599999999997em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span><span style="top:-1.8939999999999995em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.394000000000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.894em;"><span style="top:-5.161560000000001em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span><span style="top:-3.6615599999999997em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span><span style="top:-1.8939999999999995em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">x</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.394000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<ul>
<li><strong>方法二：</strong></li>
</ul>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>F</mi><mrow><mi>H</mi><mi>L</mi><mi>L</mi><mi>C</mi></mrow></msup><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="right center left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mi>L</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>S</mi><mi>L</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>F</mi><mi>L</mi><mo>∗</mo></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mi>L</mi></msub><mo>≤</mo><mn>0</mn><mo>&lt;</mo><msub><mi>S</mi><mi>M</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>F</mi><mi>R</mi><mo>∗</mo></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mi>M</mi></msub><mo>≤</mo><mn>0</mn><mo>&lt;</mo><msub><mi>S</mi><mi>R</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mi>R</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mi>R</mi></msub><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> F^{HLLC}=\left\{
\begin{array}{rcl}
F_L       &amp;      &amp; {0      &lt;      S_L}\\
F^*_L     &amp;      &amp; {S_L \leq 0 &lt; S_M}\\
F^*_R     &amp;      &amp; {S_M \leq 0 &lt; S_R}\\
F_R       &amp;      &amp; {S_R \leq 0}
\end{array} \right. </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80004em;vertical-align:-2.15002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65002em;"><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.424669em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.424669em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.65em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.4499999999999997em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.2499999999999996em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.0499999999999996em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<ul>
<li><strong>方法三:</strong></li>
</ul>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>x=0</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>x!=0</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(x)=
\begin{cases}
0&amp; \text{x=0}\\
1&amp; \text{x!=0}
\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">x=0</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">x!=0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注释内容--&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">注释</span><br><span class="hljs-comment">内容</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure>
<!--这是一段注释，渲染后不会出现-->
<!--
这是多段
注释
-->
<h3 id="换行-空行"><a class="markdownIt-Anchor" href="#换行-空行"></a> 换行 (空行)</h3>
<p>第一行</p>
<br>
<br>
<br>
<br>
<p>第二行</p>
<br>
<br>
<center><font face="黑体" color="grey" size="4">———————— END ————————</font></center>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2022/08/05/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<center><font face="黑体" color="black" size="4">----------------- END -----------------</font></center>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode刷题笔记</title>
    <url>/blog/2022/08/05/3c79af21.html</url>
    <content><![CDATA[<link href="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/KaTeX/0.10.2/katex.min.css" rel="stylesheet">
<span id="more"></span>
<h3 id="总目录"><a class="markdownIt-Anchor" href="#总目录"></a> 总目录</h3>
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E6%80%BB%E7%9B%AE%E5%BD%95">总目录</a></li>
<li><a href="#21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">21 合并两个有序链表</a>
<ul>
<li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li>
<li><a href="#%E9%A2%98%E8%A7%A3">题解</a></li>
</ul>
</li>
<li><a href="#23-%E5%90%88%E5%B9%B6-k-%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8">23 合并 k 个升序链表</a>
<ul>
<li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-2">题目描述</a></li>
<li><a href="#%E9%A2%98%E8%A7%A3-2">题解</a></li>
</ul>
</li>
<li><a href="#88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84">88 合并两个有序数组</a>
<ul>
<li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-3">题目描述</a></li>
<li><a href="#%E9%A2%98%E8%A7%A3-3">题解</a></li>
</ul>
</li>
<li><a href="#148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8">148 排序链表</a>
<ul>
<li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-4">题目描述</a></li>
<li><a href="#%E9%A2%98%E8%A7%A3-4">题解</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h3 id="21-合并两个有序链表"><a class="markdownIt-Anchor" href="#21-合并两个有序链表"></a> 21 合并两个有序链表</h3>
<p><a href="#%E6%80%BB%E7%9B%AE%E5%BD%95">返回总目录</a></p>
<h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4>
<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/blog/blog/2022/08/05/3c79af21/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.jpg" alt="示例1"></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[1,2,4]</span>, l2 = <span class="hljs-comment">[1,3,4]</span><br>输出：<span class="hljs-comment">[1,1,2,3,4,4]</span><br></code></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[]</span>, l2 = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">来源：力扣（LeetCode）<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/m</span>erge-two-sorted-lists<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<hr>
<h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4>
<p><strong>个人题解</strong></p>
<p><strong>解法一 (AC): 暴力法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode **head, <span class="hljs-type">int</span> val)</span>;<br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* list1, <span class="hljs-keyword">struct</span> ListNode* list2)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">new</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">NULL</span> &amp;&amp; list2 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (list1-&gt;val &lt; list2-&gt;val)<br>        &#123;<br>            insertNode(&amp;new, list1-&gt;val);<br>            list1 = list1-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            insertNode(&amp;new, list2-&gt;val);<br>            list2 = list2-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        insertNode(&amp;new, list1-&gt;val);<br>        list1 = list1-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list2 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        insertNode(&amp;new, list2-&gt;val);<br>        list2 = list2-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> new;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode **head, <span class="hljs-type">int</span> val)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p</span> =</span> *head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">t</span>;</span><br>    t = (<span class="hljs-keyword">struct</span> ListNode *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    t-&gt;val = val;<br>    t-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (!(*head))<br>    &#123;<br>        *head = t;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    p-&gt;next = t;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>解法一的优化 (AC):</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode **head, <span class="hljs-keyword">struct</span> ListNode **tail, <span class="hljs-type">int</span> val)</span>;<br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* list1, <span class="hljs-keyword">struct</span> ListNode* list2)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>, *tail = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">NULL</span> &amp;&amp; list2 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (list1-&gt;val &lt; list2-&gt;val)<br>        &#123;<br>            insertNode(&amp;head, &amp;tail, list1-&gt;val);<br>            list1 = list1-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            insertNode(&amp;head, &amp;tail, list2-&gt;val);<br>            list2 = list2-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        insertNode(&amp;head, &amp;tail, list1-&gt;val);<br>        list1 = list1-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (list2 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        insertNode(&amp;head, &amp;tail, list2-&gt;val);<br>        list2 = list2-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode **head, <span class="hljs-keyword">struct</span> ListNode **tail, <span class="hljs-type">int</span> val)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p</span>;</span><br><br>    p = (<span class="hljs-keyword">struct</span> ListNode *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    p-&gt;val = val;<br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (!(*head))<br>    &#123;<br>        *head = p;<br>        *tail = p;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    (*tail)-&gt;next = p;<br>    (*tail) = p;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>解法二 (AC): 多指针法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* list1, <span class="hljs-keyword">struct</span> ListNode* list2)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">pre</span>, *<span class="hljs-title">now</span>, *<span class="hljs-title">t</span>, *<span class="hljs-title">tmp</span>;</span><br><br>    pre = <span class="hljs-literal">NULL</span>;<br>    now = list1;<br>    t = list2;<br>    <span class="hljs-keyword">while</span> (now != <span class="hljs-literal">NULL</span> &amp;&amp; t != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t-&gt;val &gt; now-&gt;val)<br>        &#123;<br>            pre = now;<br>            now = pre-&gt;next;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        tmp = (<span class="hljs-keyword">struct</span> ListNode *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        tmp-&gt;val = t-&gt;val;<br>        tmp-&gt;next = now;<br>        <span class="hljs-keyword">if</span> (pre == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            list1 = tmp;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            pre-&gt;next = tmp;<br>        &#125;<br>        pre = tmp;<br>        t = t-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        tmp = (<span class="hljs-keyword">struct</span> ListNode *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        tmp-&gt;val = t-&gt;val;<br>        tmp-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span> (pre == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            list1 = tmp;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            pre-&gt;next = tmp;<br>        &#125;<br>        pre = tmp;<br>        t = t-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> list1;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>注：</strong>
针对 <strong>解法一</strong> 和 <strong>解法二</strong> ，可在 <code>mergeTwoLists</code> 函数开头加上以下代码，当 <code>list1</code> 或 <code>list2</code> 为 <code>NULL</code> 时，可以提高效率。(<strong>解法三</strong> 和 <strong>解法四</strong> 均包含该段代码。)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (!list1 || !list2)<br>&#123;<br>    <span class="hljs-keyword">return</span> list1 == <span class="hljs-literal">NULL</span> ? list2 : list1;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>解法三 (AC): (官方题解迭代法 C 代码)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* list1, <span class="hljs-keyword">struct</span> ListNode* list2)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">now</span>, *<span class="hljs-title">head</span>;</span><br><br>    <span class="hljs-comment">//哨兵结点 (dummy node, 哑结点)，作用类似头结点，方便统一处理</span><br>    head = (<span class="hljs-keyword">struct</span> ListNode *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    now = head;<br><br>    <span class="hljs-keyword">while</span> (list1 != <span class="hljs-literal">NULL</span> &amp;&amp; list2 != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (list1-&gt;val &lt; list2-&gt;val)<br>        &#123;<br>            now-&gt;next = list1;<br>            list1 = list1-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            now-&gt;next = list2;<br>            list2 = list2-&gt;next;<br>        &#125;<br>        now = now-&gt;next;<br>    &#125;<br>    now-&gt;next = list1 == <span class="hljs-literal">NULL</span> ? list2 : list1;<br>    <span class="hljs-comment">//对官方题解的改进，防止内存泄漏</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">ans</span> =</span> head-&gt;next;<br>    <span class="hljs-built_in">free</span>(head);<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>解法四 (AC): (官方题解递归法 C 代码)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* list1, <span class="hljs-keyword">struct</span> ListNode* list2)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (list1 == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> list2;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list2 == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list1-&gt;val &lt; list2-&gt;val)<br>    &#123;<br>        list1-&gt;next = mergeTwoLists(list1-&gt;next, list2);<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        list2-&gt;next = mergeTwoLists(list1, list2-&gt;next);<br>        <span class="hljs-keyword">return</span> list2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>官方题解</strong></p>
<p><strong>方法一：递归</strong></p>
<ul>
<li><strong>思路</strong></li>
</ul>
<p>我们可以如下递归地定义两个链表里的 <code>merge</code> 操作（忽略边界情况，比如空链表等）：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>1</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><mi>m</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi><mo stretchy="false">(</mo><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>1</mn><mo stretchy="false">[</mo><mn>1</mn><mo>:</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle scriptlevel="0" displaystyle="false"><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>1</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><mi>m</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi><mo stretchy="false">(</mo><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo>:</mo><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle scriptlevel="0" displaystyle="false"><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mstyle></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}
list1[0]+merge(list1[1:],list2)&amp; \text{$list1[0]&lt;list2[0]$}\\
list2[0]+merge(list1,list2[1:])&amp; \text{$otherwise$}
\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">er</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">se</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>也就是说，两个链表头部值较小的一个节点与剩下元素的 <code>merge</code> 操作结果合并。</p>
<ul>
<li><strong>算法</strong></li>
</ul>
<p>我们直接将以上递归过程建模，同时需要考虑边界情况。</p>
<p>如果 <code>l1</code> 或者 <code>l2</code> 一开始就是空链表 ，那么没有任何操作需要合并，所以我们只需要返回非空链表。否则，我们要判断 <code>l1</code> 和 <code>l2</code> 哪一个链表的头节点的值更小，然后递归地决定下一个添加到结果里的节点。如果两个链表有一个为空，递归结束。</p>
<p><strong>C++ 版本代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>            l1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1-&gt;next, l2);<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            l2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2-&gt;next);<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<ul>
<li><strong>复杂度分析</strong></li>
</ul>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 分别为两个链表的长度。因为每次调用递归都会去掉 <code>l1</code> 或者 <code>l2</code> 的头节点（直到至少有一个链表为空），函数 <code>mergeTwoList</code> 至多只会递归调用每个节点一次。因此，时间复杂度取决于合并后的链表长度，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。</p>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 分别为两个链表的长度。递归调用 <code>mergeTwoLists</code> 函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。结束递归调用时 <code>mergeTwoLists</code> 函数最多调用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n + m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 次，因此空间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。</p>
<hr>
<p><strong>方法二：迭代</strong></p>
<ul>
<li><strong>思路</strong></li>
</ul>
<p>我们可以用迭代的方法来实现上述算法。当 <code>l1</code> 和 <code>l2</code> 都不是空链表时，判断 <code>l1</code> 和 <code>l2</code> 哪一个链表的头节点的值更小，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点向后移一位。</p>
<ul>
<li><strong>算法</strong></li>
</ul>
<p>首先，我们设定一个哨兵节点 <code>prehead</code> ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 <code>prev</code> 指针，我们需要做的是调整它的 <code>next</code> 指针。然后，我们重复以下过程，直到 <code>l1</code> 或者 <code>l2</code> 指向了 <code>null</code> ：如果 <code>l1</code> 当前节点的值小于等于 <code>l2</code> ，我们就把 <code>l1</code> 当前的节点接在 <code>prev</code> 节点的后面同时将 <code>l1</code> 指针往后移一位。否则，我们对 <code>l2</code> 做同样的操作。不管我们将哪一个元素接在了后面，我们都需要把 <code>prev</code> 向后移一位。</p>
<p>在循环终止的时候， <code>l1</code> 和 <code>l2</code> 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表即可。</p>
<p>下图展示了 <code>1-&gt;4-&gt;5</code> 和 <code>1-&gt;2-&gt;3-&gt;6</code> 两个链表迭代合并的过程：<a href="https://leetcode.cn/problems/merge-two-sorted-lists/solution/he-bing-liang-ge-you-xu-lian-biao-by-leetcode-solu/">打开原网址查看</a></p>
<p><strong>C++ 版本代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* preHead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br><br>        ListNode* prev = preHead;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span> &amp;&amp; l2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>                prev-&gt;next = l1;<br>                l1 = l1-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev-&gt;next = l2;<br>                l2 = l2-&gt;next;<br>            &#125;<br>            prev = prev-&gt;next;<br>        &#125;<br><br>        <span class="hljs-comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span><br>        prev-&gt;next = l1 == <span class="hljs-literal">nullptr</span> ? l2 : l1;<br><br>        <span class="hljs-keyword">return</span> preHead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<ul>
<li><strong>复杂度分析</strong></li>
</ul>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 分别为两个链表的长度。因为每次循环迭代中，<code>l1</code> 和 <code>l2</code> 只有一个元素会被放进合并链表中， 因此 <code>while</code> 循环的次数不会超过两个链表的长度之和。所有其他操作的时间复杂度都是常数级别的，因此总的时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。</p>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。我们只需要常数的空间存放若干变量。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">作者：LeetCode-Solution<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/m</span>erge-two-sorted-lists<span class="hljs-regexp">/solution/</span>he-bing-liang-ge-you-xu-lian-biao-by-leetcode-solu/<br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<br>
<br>
<br>
<h3 id="23-合并-k-个升序链表"><a class="markdownIt-Anchor" href="#23-合并-k-个升序链表"></a> 23 合并 k 个升序链表</h3>
<p><a href="#%E6%80%BB%E7%9B%AE%E5%BD%95">返回总目录</a></p>
<h4 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h4>
<p>给你一个链表数组，每个链表都已经按升序排列。</p>
<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">输入：lists = [[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>解释：链表数组如下：<br>[<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>,<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>,<br>  <span class="hljs-number">2</span>-&gt;<span class="hljs-number">6</span><br>]<br>将它们合并到一个有序链表中得到。<br><span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：lists = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">输入：lists = <span class="hljs-string">[[]]</span><br>输出：[]<br></code></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mo>=</mo></mrow><annotation encoding="application/x-tex">k ==</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span> <code>lists.length</code></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">0 \leq k \leq 10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo></mrow><annotation encoding="application/x-tex">0 \leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span></span></span></span> <code>lists[i].length</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mn>500</mn></mrow><annotation encoding="application/x-tex">\leq 500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo>≤</mo></mrow><annotation encoding="application/x-tex">-10^4 \leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span></span></span></span> <code>lists[i][j]</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">\leq 10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
<li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li>
<li><code>lists[i].length</code> 的总和不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">来源：力扣（LeetCode）<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/m</span>erge-k-sorted-lists<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<hr>
<h4 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h4>
<p><strong>个人题解</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode</span><br><span class="hljs-comment"> *&#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">struct</span> ListNode *<span class="hljs-title function_">mergeKLists</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode **lists, <span class="hljs-type">int</span> listsSize)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (listsSize &lt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> listsSize == <span class="hljs-number">0</span> ? <span class="hljs-literal">NULL</span> : lists[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">head</span>, *<span class="hljs-title">cur</span>, *<span class="hljs-title">ans</span>;</span><br>    head = (<span class="hljs-keyword">struct</span> ListNode *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; listsSize - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (lists[i] != <span class="hljs-literal">NULL</span> &amp;&amp; lists[i + <span class="hljs-number">1</span>] != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (lists[i]-&gt;val &lt; lists[i + <span class="hljs-number">1</span>]-&gt;val)<br>            &#123;<br>                cur-&gt;next = lists[i];<br>                lists[i] = lists[i]-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cur-&gt;next = lists[i + <span class="hljs-number">1</span>];<br>                lists[i + <span class="hljs-number">1</span>] = lists[i + <span class="hljs-number">1</span>]-&gt;next;<br>            &#125;<br>            cur = cur-&gt;next;<br>        &#125;<br>        cur-&gt;next = lists[i] == <span class="hljs-literal">NULL</span> ? lists[i + <span class="hljs-number">1</span>] : lists[i];<br>        lists[i + <span class="hljs-number">1</span>] = head-&gt;next;<br>    &#125;<br>    ans = head-&gt;next;<br>    <span class="hljs-built_in">free</span>(head);<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>官方题解</strong></p>
<p><strong>前置知识：合并两个有序链表</strong></p>
<p><strong>思路</strong></p>
<p>在解决 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">「</mi></mrow><annotation encoding="application/x-tex">「</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">「</span></span></span></span> 合并 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 个排序链表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">」</mi></mrow><annotation encoding="application/x-tex">」</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">」</span></span></span></span> 这个问题之前，我们先来看一个更简单的问题：如何合并两个有序链表？假设链表 <code>a</code> 和 <code>b</code>的长度都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>， <strong>如何在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的时间代价以及 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的空间代价完成合并？</strong>  这个问题在面试中常常出现，为了达到空间代价是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，我们的宗旨是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">「</mi></mrow><annotation encoding="application/x-tex">「</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">「</span></span></span></span> 原地调整链表元素的 <code>next</code> 指针完成合并 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">」</mi></mrow><annotation encoding="application/x-tex">」</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">」</span></span></span></span>。 <strong>以下是合并的步骤和注意事项，对这个问题比较熟悉的读者可以跳过这一部分。此部分建议结合代码阅读。</strong></p>
<p>首先我们需要一个变量 <code>head</code> 来保存合并之后链表的头部，你可以把 <code>head</code> 设置为一个虚拟的头（也就是 <code>head</code> 的 <code>val</code> 属性不保存任何值），这是为了方便代码的书写，在整个链表合并完之后，返回它的下一位置即可。</p>
<p>我们需要一个指针 <code>tail</code> 来记录下一个插入位置的前一个位置，以及两个指针 <code>aPtr</code> 和 <code>bPtr</code> 来记录 <code>a</code> 和 <code>b</code> 未合并部分的第一位。 <strong>注意这里的描述，<code>tail</code> 不是下一个插入的位置，<code>aPtr</code> 和 <code>bPtr</code> 所指向的元素处于「待合并」的状态，也就是说它们还没有合并入最终的链表。</strong> 当然你也可以给他们赋予其他的定义，但是定义不同实现就会不同。</p>
<p>当 <code>aPtr</code> 和 <code>bPtr</code> 都不为空的时候，取 <code>val</code> 属性较小的合并；如果 <code>aPtr</code> 为空，则把整个 <code>bPtr</code> 以及后面的元素全部合并；<code>bPtr</code> 为空时同理。</p>
<p>在合并的时候，应该先调整 <code>tail</code> 的 <code>next</code> 属性，再后移 <code>tail</code> 和 <code>*Ptr</code>（<code>aPtr</code> 或者 <code>bPtr</code>）。那么这里 <code>tail</code> 和 <code>*Ptr</code> 是否存在先后顺序呢？它们谁先动谁后动都是一样的，不会改变任何元素的 <code>next</code> 指针。</p>
<p><strong>C++ 代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *a, ListNode *b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ((!a) || (!b)) <span class="hljs-keyword">return</span> a ? a : b;<br>    ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;<br>    <span class="hljs-keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;<br>        <span class="hljs-keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;<br>            tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;<br>        &#125;<br>        tail = tail-&gt;next;<br>    &#125;<br>    tail-&gt;next = (aPtr ? aPtr : bPtr);<br>    <span class="hljs-keyword">return</span> head.next;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</li>
<li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li>
</ul>
<hr>
<p><strong>方法一：顺序合并</strong></p>
<p><strong>思路</strong></p>
<p>我们可以想到一种最朴素的方法：用一个变量 <code>ans</code> 来维护已经合并的链表，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 次循环把第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个链表和 <code>ans</code> 合并，答案保存到 <code>ans</code> 中。</p>
<p><strong>C++ 代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *a, ListNode *b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((!a) || (!b)) <span class="hljs-keyword">return</span> a ? a : b;<br>        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;<br>        <span class="hljs-keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;<br>            <span class="hljs-keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;<br>                tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;<br>            &#125;<br>            tail = tail-&gt;next;<br>        &#125;<br>        tail-&gt;next = (aPtr ? aPtr : bPtr);<br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;<br>        ListNode *ans = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; lists.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            ans = <span class="hljs-built_in">mergeTwoLists</span>(ans, lists[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>
<p>时间复杂度：假设每个链表的最长长度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 。在第一次合并后，<code>ans</code> 的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> ；第二次合并后，<code>ans</code> 的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2 \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 次合并后，<code>ans</code> 的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 。第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 次合并的时间代价是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>i</mi><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + (i - 1) \times n) = O(i \times n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ，那么总的时间代价为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><mo stretchy="false">(</mo><mi>i</mi><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>k</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sum_{i = 1}^{k} (i \times n)) = O(\frac{(1 + k)\cdot k}{2} \times n) = O(k^2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2887179999999998em;vertical-align:-0.29971000000000003em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ，故渐进时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>k</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k^2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
</li>
<li>
<p>空间复杂度：没有用到与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 规模相关的辅助空间，故渐进空间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p>
</li>
</ul>
<hr>
<p><strong>方法二：分治合并</strong></p>
<p><strong>思路</strong></p>
<p>考虑优化方法一，用分治的方法进行合并。</p>
<ul>
<li>
<p>将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个链表配对并将同一对中的链表合并；</p>
</li>
<li>
<p>第一轮合并以后， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个链表被合并成了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac><mn>2</mn></mrow><annotation encoding="application/x-tex">\frac{k}{2} 
2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">2</span></span></span></span> 个链表，平均长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mi>n</mi></mrow><mi>k</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{2n}{k} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，然后是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{4} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个链表, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个链表等等；</p>
</li>
<li>
<p>重复这一过程，直到我们得到了最终的有序链表。</p>
</li>
</ul>
<p><img src="/blog/blog/2022/08/05/3c79af21/23.%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/23.%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8-%E9%A2%98%E8%A7%A3-%E5%88%86%E6%B2%BB%E6%B3%95.png" alt></p>
<p><strong>C++ 代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *a, ListNode *b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((!a) || (!b)) <span class="hljs-keyword">return</span> a ? a : b;<br>        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;<br>        <span class="hljs-keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;<br>            <span class="hljs-keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;<br>                tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;<br>            &#125;<br>            tail = tail-&gt;next;<br>        &#125;<br>        tail-&gt;next = (aPtr ? aPtr : bPtr);<br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">merge</span><span class="hljs-params">(vector &lt;ListNode*&gt; &amp;lists, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> lists[l];<br>        <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">mergeTwoLists</span>(<span class="hljs-built_in">merge</span>(lists, l, mid), <span class="hljs-built_in">merge</span>(lists, mid + <span class="hljs-number">1</span>, r));<br>    &#125;<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">merge</span>(lists, <span class="hljs-number">0</span>, lists.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>
<p>时间复杂度：考虑递归 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">「</mi></mrow><annotation encoding="application/x-tex">「</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">「</span></span></span></span> 向上回升 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">」</mi></mrow><annotation encoding="application/x-tex">」</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">」</span></span></span></span> 的过程 —— 第一轮合并 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 组链表，每一组的时间代价是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ；第二轮合并 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 组链表，每一组的时间代价是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>4</mn><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(4n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">4</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> … 所以总的时间代价是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><mfrac><mi>k</mi><msup><mn>2</mn><mi>i</mi></msup></mfrac><mo>×</mo><msup><mn>2</mn><mi>i</mi></msup><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sum_{i = 1}^{\infty} \frac{k}{2^i} \times 2^i n) = O(kn \times \log k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> ，故渐进时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kn \times \log k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 。</p>
</li>
<li>
<p>空间复杂度：递归会使用到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 空间代价的栈空间。</p>
</li>
</ul>
<hr>
<p><strong>方法三：使用优先队列合并</strong></p>
<p><strong>思路</strong></p>
<p>这个方法和前两种方法的思路有所不同，我们需要维护当前每个链表没有被合并的元素的最前面一个，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个链表就最多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个满足这样条件的元素，每次在这些元素里面选取 <code>val</code> 属性最小的元素合并到答案中。在选取最小元素的时候，我们可以用优先队列来优化这个过程。</p>
<p><strong>C++ 代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Status</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        ListNode *ptr;<br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Status &amp;rhs) <span class="hljs-type">const</span> &#123;<br>            <span class="hljs-keyword">return</span> val &gt; rhs.val;<br>        &#125;<br>    &#125;;<br><br>    priority_queue &lt;Status&gt; q;<br><br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> node: lists) &#123;<br>            <span class="hljs-keyword">if</span> (node) q.<span class="hljs-built_in">push</span>(&#123;node-&gt;val, node&#125;);<br>        &#125;<br>        ListNode head, *tail = &amp;head;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">auto</span> f = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>            tail-&gt;next = f.ptr; <br>            tail = tail-&gt;next;<br>            <span class="hljs-keyword">if</span> (f.ptr-&gt;next) q.<span class="hljs-built_in">push</span>(&#123;f.ptr-&gt;next-&gt;val, f.ptr-&gt;next&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>
<p>时间复杂度：考虑优先队列中的元素不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个，那么插入和删除的时间代价为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> ，这里最多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">kn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">n</span></span></span></span> 个点，对于每个点都被插入删除各一次，故总的时间代价即渐进时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kn \times \log k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 。</p>
</li>
<li>
<p>空间复杂度：这里用了优先队列，优先队列中的元素不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个，故渐进空间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">作者：LeetCode-Solution<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/merge-k-sorted-lists/solution/he-bing-kge-pai-xu-lian-biao-by-leetcode-solutio-2/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<br>
<br>
<br>
<h3 id="88-合并两个有序数组"><a class="markdownIt-Anchor" href="#88-合并两个有序数组"></a> 88 合并两个有序数组</h3>
<p><a href="#%E6%80%BB%E7%9B%AE%E5%BD%95">返回总目录</a></p>
<h4 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h4>
<p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code> ，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>
<p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p>
<p><strong>注意：</strong> 最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code> ，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,3,0,0,0]</span>, m = 3, nums2 = <span class="hljs-comment">[2,5,6]</span>, n = 3<br>输出：<span class="hljs-comment">[1,2,2,3,5,6]</span><br>解释：需要合并 <span class="hljs-comment">[1,2,3]</span> 和 <span class="hljs-comment">[2,5,6]</span> 。<br>合并结果是 <span class="hljs-comment">[1,2,2,3,5,6]</span> ，其中斜体加粗标注的为 nums1 中的元素。<br></code></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1]</span>, m = 1, nums2 = <span class="hljs-comment">[]</span>, n = 0<br>输出：<span class="hljs-comment">[1]</span><br>解释：需要合并 <span class="hljs-comment">[1]</span> 和 <span class="hljs-comment">[]</span> 。<br>合并结果是 <span class="hljs-comment">[1]</span> 。<br></code></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[0]</span>, m = 0, nums2 = <span class="hljs-comment">[1]</span>, n = 1<br>输出：<span class="hljs-comment">[1]</span><br>解释：需要合并的数组是 <span class="hljs-comment">[]</span> 和 <span class="hljs-comment">[1]</span> 。<br>合并结果是 <span class="hljs-comment">[1]</span> 。<br>注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。<br></code></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>1 &lt;= m + n &lt;= 200</code></li>
<li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li>
</ul>
<p><strong>进阶：</strong> 你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">来源：力扣（LeetCode）<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/m</span>erge-sorted-array<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<hr>
<h4 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h4>
<p><strong>个人题解</strong></p>
<p><strong>插入法：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> *nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> *nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> idx1 = <span class="hljs-number">0</span>, idx2 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (idx1 &lt; m &amp;&amp; idx2 &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums2[idx2] &gt; nums1[idx1])<br>        &#123;<br>            idx1++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m - <span class="hljs-number">1</span>; i &gt;= idx1; i--)<br>        &#123;<br>            nums1[i + <span class="hljs-number">1</span>] = nums1[i];<br>        &#125;<br>        nums1[idx1] = nums2[idx2];<br>        idx2++;<br>        m++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (idx2 &lt; n)<br>    &#123;<br>        nums1[idx1++] = nums2[idx2++];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>官方题解</strong></p>
<p><strong>方法一：直接合并后排序</strong></p>
<ul>
<li><strong>算法</strong></li>
</ul>
<p>最直观的方法是先将数组 <code>nums2</code> 放进数组 <code>nums1</code> 的尾部，然后直接对整个数组进行排序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span> &#123;<br>    <span class="hljs-keyword">return</span> *a - *b;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i != n; ++i) &#123;<br>        nums1[m + i] = nums2[i];<br>    &#125;<br>    qsort(nums1, nums1Size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), cmp);<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><strong>复杂度分析</strong></li>
</ul>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((m + n)log(m + n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。
排序序列长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，套用快速排序的时间复杂度即可，平均情况为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((m + n)log(m + n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。</p>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(m + n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。
排序序列长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，套用快速排序的空间复杂度即可，平均情况为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(m + n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。</p>
<hr>
<p><strong>方法二：双指针</strong></p>
<ul>
<li><strong>算法</strong></li>
</ul>
<p>方法一没有利用数组 <code>nums1</code> 与 <code>nums2</code> 已经被排序的性质。为了利用这一性质，我们可以使用双指针方法。这一方法将两个数组看作队列，每次从两个数组头部取出比较小的数字放到结果中。如下面的动画所示：<a href="https://leetcode.cn/problems/merge-sorted-array/solution/he-bing-liang-ge-you-xu-shu-zu-by-leetco-rrb0/">打开原网址查看</a></p>
<p>我们为两个数组分别设置一个指针 <code>p1</code> 与 <code>p2</code> 来作为队列的头部指针。代码实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> p1 = <span class="hljs-number">0</span>, p2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sorted[m + n];<br>    <span class="hljs-type">int</span> cur;<br>    <span class="hljs-keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (p1 == m) &#123;<br>            cur = nums2[p2++];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == n) &#123;<br>            cur = nums1[p1++];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;<br>            cur = nums1[p1++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = nums2[p2++];<br>        &#125;<br>        sorted[p1 + p2 - <span class="hljs-number">1</span>] = cur;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i != m + n; ++i) &#123;<br>        nums1[i] = sorted[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><strong>复杂度分析</strong></li>
</ul>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。
指针移动单调递增，最多移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 次，因此时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。
需要建立长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的中间数组 <code>sorted</code>。</p>
<hr>
<p><strong>方法三：逆向双指针 (最佳)</strong></p>
<ul>
<li><strong>算法</strong></li>
</ul>
<p>方法二中，之所以要使用临时变量，是因为如果直接合并到数组 <code>nums1</code> 中，<code>nums1</code> 中的元素可能会在取出之前被覆盖。那么如何直接避免覆盖 <code>nums1</code> 中的元素呢？观察可知，<code>nums1</code> 的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 <code>nums1</code> 的最后面。</p>
<p>严格来说，在此遍历过程中的任意一个时刻，<code>nums1</code> 数组中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m - p_1 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个元素被放入 <code>nums1</code> 的后半部，<code>nums2</code> 数组中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>p</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n - p_2 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个元素被放入 <code>nums1</code> 的后半部，而在指针 <code>p1</code> 的后面，<code>nums1</code> 数组有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m + n - p_1 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个位置。由于</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo>≥</mo><mi>m</mi><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>−</mo><msub><mi>p</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m + n - p_1 - 1  \geq m - p_1 - 1 + n - p_2 - 1 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>等价于</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p_2 \geq 1 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>永远成立，因此 <code>p1</code> 后面的位置永远足够容纳被插入的元素，不会产生 <code>p1</code> 的元素被覆盖的情况。</p>
<p>实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> p1 = m - <span class="hljs-number">1</span>, p2 = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tail = m + n - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> cur;<br>    <span class="hljs-keyword">while</span> (p1 &gt;= <span class="hljs-number">0</span> || p2 &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p1 == <span class="hljs-number">-1</span>) &#123;<br>            cur = nums2[p2--];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == <span class="hljs-number">-1</span>) &#123;<br>            cur = nums1[p1--];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[p1] &gt; nums2[p2]) &#123;<br>            cur = nums1[p1--];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = nums2[p2--];<br>        &#125;<br>        nums1[tail--] = cur;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>注：</strong>
当 <code>p2 == -1</code> ，即 <code>nums2</code> 中元素已全部塞到 <code>nums1</code> 中，这时的 <code>nums1</code> 就是最终答案，不用再将 <code>nums1</code> 剩余的值塞到自己当中。因此，将</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == <span class="hljs-number">-1</span>) &#123;<br>    cur = nums1[p1--];<br>&#125;<br></code></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == <span class="hljs-number">-1</span>)<br>&#123;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>可提高效率。</p>
<ul>
<li><strong>复杂度分析</strong></li>
</ul>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。
指针移动单调递减，最多移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 次，因此时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。
直接对数组 <code>nums1</code> 原地修改，不需要额外空间。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">作者：LeetCode-Solution<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/m</span>erge-sorted-array<span class="hljs-regexp">/solution/</span>he-bing-liang-ge-you-xu-shu-zu-by-leetco-rrb0/<br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<br>
<br>
<br>
<h3 id="148-排序链表"><a class="markdownIt-Anchor" href="#148-排序链表"></a> 148 排序链表</h3>
<p><a href="#%E6%80%BB%E7%9B%AE%E5%BD%95">返回总目录</a></p>
<h4 id="题目描述-4"><a class="markdownIt-Anchor" href="#题目描述-4"></a> 题目描述</h4>
<p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/blog/blog/2022/08/05/3c79af21/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8-%E7%A4%BA%E4%BE%8B1.jpg" alt></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">4,2,1,3</span>]<br>输出：[<span class="hljs-number">1,2,3,4</span>]<br></code></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="/blog/blog/2022/08/05/3c79af21/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8-%E7%A4%BA%E4%BE%8B2.jpg" alt></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">输入：head = [-<span class="hljs-number">1,5,3,4</span>,<span class="hljs-number">0</span>]<br>输出：[-<span class="hljs-number">1,0,3,4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目在范围 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mtext>  </mtext><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, \; 5 \times 10^4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 内</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>105</mn><mi mathvariant="normal"> </mi><mo>≤</mo></mrow><annotation encoding="application/x-tex">-105 \leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mord"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span></span></span></span> <code>Node.val</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mn>105</mn></mrow><annotation encoding="application/x-tex">\leq 105</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span></span></span></span></li>
</ul>
<p><strong>进阶：</strong> 你可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">来源：力扣（LeetCode）<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/</span>sort-list<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<hr>
<h4 id="题解-4"><a class="markdownIt-Anchor" href="#题解-4"></a> 题解</h4>
<p><strong>个人题解</strong></p>
<p><strong>方法一 (TLE): 冒泡排序</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode</span><br><span class="hljs-comment"> *&#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">sortList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode *head)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || (head &amp;&amp; head-&gt;next == <span class="hljs-literal">NULL</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p</span>, *<span class="hljs-title">q</span>, *<span class="hljs-title">tail</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (head != tail)<br>    &#123;<br>        p = head, q = head-&gt;next;<br>        <span class="hljs-keyword">while</span> (q != tail)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (p-&gt;val &gt; q-&gt;val)<br>            &#123;<br>                <span class="hljs-type">int</span> t = p-&gt;val;<br>                p-&gt;val = q-&gt;val;<br>                q-&gt;val = t;<br>            &#125;<br>            p = q;<br>            q = q-&gt;next;<br>        &#125;<br>        tail = p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>方法二: 归并排序 (迭代)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><br></code></pre></td></tr></table></figure>
<hr>
<p><strong>官方题解</strong></p>
<p><strong>前言</strong></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">「</mi><mn>147.</mn></mrow><annotation encoding="application/x-tex">「147.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord cjk_fallback">「</span><span class="mord">1</span><span class="mord">4</span><span class="mord">7</span><span class="mord">.</span></span></span></span> 对链表进行插入排序 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">」</mi></mrow><annotation encoding="application/x-tex">」</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">」</span></span></span></span> 要求使用插入排序的方法对链表进行排序，插入排序的时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 是链表的长度。这道题考虑时间复杂度更低的排序算法。题目的进阶问题要求达到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的时间复杂度和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的空间复杂度，时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的排序算法包括归并排序、堆排序和快速排序（快速排序的最差时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，其中最适合链表的排序算法是 <strong>归并排序</strong>。</p>
<p>归并排序基于分治算法。最容易想到的实现方式是自顶向下的递归实现，考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 。如果要达到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的空间复杂度，则需要使用自底向上的实现方式。</p>
<p><strong>方法一：自顶向下归并排序</strong></p>
<p>对链表自顶向下归并排序的过程如下。</p>
<ol>
<li>
<p>找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用 <strong>快慢指针</strong> 的做法，快指针每次移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 步，慢指针每次移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 步，当快指针到达链表末尾时，慢指针指向的链表节点即为链表的中点。</p>
</li>
<li>
<p>对两个子链表分别排序。</p>
</li>
<li>
<p>将两个排序后的子链表合并，得到完整的排序后的链表。可以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">「</mi><mn>21.</mn></mrow><annotation encoding="application/x-tex">「21.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord cjk_fallback">「</span><span class="mord">2</span><span class="mord">1</span><span class="mord">.</span></span></span></span> 合并两个有序链表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">」</mi></mrow><annotation encoding="application/x-tex">」</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">」</span></span></span></span> 的做法，将两个有序的子链表进行合并。</p>
</li>
</ol>
<p>上述过程可以通过递归实现。递归的终止条件是链表的节点个数小于或等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，即当链表为空或者链表只包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个节点时，不需要对链表进行拆分和排序。</p>
<p><strong>C 代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head1, <span class="hljs-keyword">struct</span> ListNode* head2)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">dummyHead</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    dummyHead-&gt;val = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">temp</span> =</span> dummyHead, *temp1 = head1, *temp2 = head2;<br>    <span class="hljs-keyword">while</span> (temp1 != <span class="hljs-literal">NULL</span> &amp;&amp; temp2 != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp1-&gt;val &lt;= temp2-&gt;val) &#123;<br>            temp-&gt;next = temp1;<br>            temp1 = temp1-&gt;next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp-&gt;next = temp2;<br>            temp2 = temp2-&gt;next;<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (temp1 != <span class="hljs-literal">NULL</span>) &#123;<br>        temp-&gt;next = temp1;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp2 != <span class="hljs-literal">NULL</span>) &#123;<br>        temp-&gt;next = temp2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyHead-&gt;next;<br>&#125;<br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">toSortList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head, <span class="hljs-keyword">struct</span> ListNode* tail)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == tail) &#123;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">slow</span> =</span> head, *fast = head;<br>    <span class="hljs-keyword">while</span> (fast != tail) &#123;<br>        slow = slow-&gt;next;<br>        fast = fast-&gt;next;<br>        <span class="hljs-keyword">if</span> (fast != tail) &#123;<br>            fast = fast-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">mid</span> =</span> slow;<br>    <span class="hljs-keyword">return</span> merge(toSortList(head, mid), toSortList(mid, tail));<br>&#125;<br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">sortList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> toSortList(head, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 是链表的长度。</p>
</li>
<li>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 是链表的长度。空间复杂度主要取决于递归调用的栈空间。</p>
</li>
</ul>
<hr>
<p><strong>方法二：自底向上归并排序</strong></p>
<p>使用自底向上的方法实现归并排序，则可以达到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的空间复杂度。</p>
<p>首先求得链表的长度 <code>length</code> ，然后将链表拆分成子链表进行合并。</p>
<p>具体做法如下。</p>
<p>用 <code>subLength</code> 表示每次需要排序的子链表的长度，初始时 <code>subLength</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">= 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 。</p>
<p>每次将链表拆分成若干个长度为 <code>subLength</code> 的子链表（最后一个子链表的长度可以小于 <code>subLength</code>），按照每两个子链表一组进行合并，合并后即可得到若干个长度为 <code>subLength</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">×</span><span class="mord">2</span></span></span></span> 的有序子链表（最后一个子链表的长度可以小于 <code>subLength</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">×</span><span class="mord">2</span></span></span></span>）。合并两个子链表仍然使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">「</mi><mn>21.</mn></mrow><annotation encoding="application/x-tex">「21.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord cjk_fallback">「</span><span class="mord">2</span><span class="mord">1</span><span class="mord">.</span></span></span></span> 合并两个有序链表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">」</mi></mrow><annotation encoding="application/x-tex">」</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">」</span></span></span></span> 的做法。</p>
<p>将 <code>subLength</code> 的值加倍，重复第 2 步，对更长的有序子链表进行合并操作，直到有序子链表的长度大于或等于 <code>length</code>，整个链表排序完毕。</p>
<p>如何保证每次合并之后得到的子链表都是有序的呢？可以通过数学归纳法证明。</p>
<ol>
<li>
<p>初始时 <code>subLength</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">= 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，每个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的子链表都是有序的。</p>
</li>
<li>
<p>如果每个长度为 <code>subLength</code> 的子链表已经有序，合并两个长度为 <code>subLength</code> 的有序子链表，得到长度为 <code>subLength</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">×</span><span class="mord">2</span></span></span></span> 的子链表，一定也是有序的。</p>
</li>
<li>
<p>当最后一个子链表的长度小于 <code>subLength</code> 时，该子链表也是有序的，合并两个有序子链表之后得到的子链表一定也是有序的。</p>
</li>
</ol>
<p>因此可以保证最后得到的链表是有序的。</p>
<p><strong>C 代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head1, <span class="hljs-keyword">struct</span> ListNode* head2)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">dummyHead</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    dummyHead-&gt;val = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">temp</span> =</span> dummyHead, *temp1 = head1, *temp2 = head2;<br>    <span class="hljs-keyword">while</span> (temp1 != <span class="hljs-literal">NULL</span> &amp;&amp; temp2 != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp1-&gt;val &lt;= temp2-&gt;val) &#123;<br>            temp-&gt;next = temp1;<br>            temp1 = temp1-&gt;next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp-&gt;next = temp2;<br>            temp2 = temp2-&gt;next;<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (temp1 != <span class="hljs-literal">NULL</span>) &#123;<br>        temp-&gt;next = temp1;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp2 != <span class="hljs-literal">NULL</span>) &#123;<br>        temp-&gt;next = temp2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyHead-&gt;next;<br>&#125;<br><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">sortList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">node</span> =</span> head;<br>    <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">NULL</span>) &#123;<br>        length++;<br>        node = node-&gt;next;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">dummyHead</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    dummyHead-&gt;next = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> subLength = <span class="hljs-number">1</span>; subLength &lt; length; subLength &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">prev</span> =</span> dummyHead, *curr = dummyHead-&gt;next;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">head1</span> =</span> curr;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; subLength &amp;&amp; curr-&gt;next != <span class="hljs-literal">NULL</span>; i++) &#123;<br>                curr = curr-&gt;next;<br>            &#125;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">head2</span> =</span> curr-&gt;next;<br>            curr-&gt;next = <span class="hljs-literal">NULL</span>;<br>            curr = head2;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; subLength &amp;&amp; curr != <span class="hljs-literal">NULL</span> &amp;&amp; curr-&gt;next != <span class="hljs-literal">NULL</span>;<br>                 i++) &#123;<br>                curr = curr-&gt;next;<br>            &#125;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">next</span> =</span> <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">NULL</span>) &#123;<br>                next = curr-&gt;next;<br>                curr-&gt;next = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">merged</span> =</span> merge(head1, head2);<br>            prev-&gt;next = merged;<br>            <span class="hljs-keyword">while</span> (prev-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>                prev = prev-&gt;next;<br>            &#125;<br>            curr = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyHead-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<ul>
<li>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 是链表的长度。</p>
</li>
<li>
<p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">作者：LeetCode-Solution<br>链接：https:<span class="hljs-regexp">//</span>leetcode.cn<span class="hljs-regexp">/problems/</span>sort-list<span class="hljs-regexp">/solution/</span>pai-xu-lian-biao-by-leetcode-solution/<br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>
<br>
<br>
<br>
<center><font face="黑体" color="black" size="4">----------------- END -----------------</font></center>]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown 学习笔记</title>
    <url>/blog/2022/04/12/e8e3b494.html</url>
    <content><![CDATA[<link href="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/KaTeX/0.10.2/katex.min.css" rel="stylesheet">
<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#%E8%BF%99%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98">这是二级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98">这是三级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98">这是四级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E4%BA%94%E7%BA%A7%E6%A0%87%E9%A2%98">这是五级标题</a>
<ul>
<li><a href="#%E8%BF%99%E6%98%AF%E5%85%AD%E7%BA%A7%E6%A0%87%E9%A2%98">这是六级标题</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E6%A0%87%E9%A2%981">标题1</a>
<ul>
<li><a href="#%E6%A0%87%E9%A2%9811">标题1.1</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E9%A2%982">标题2</a>
<ul>
<li><a href="#%E6%A0%87%E9%A2%9821">标题2.1</a></li>
<li><a href="#%E6%A0%87%E9%A2%9822">标题2.2</a></li>
</ul>
</li>
<li><a href="#%E7%B2%97%E4%BD%93">粗体</a></li>
<li><a href="#%E6%96%9C%E4%BD%93">斜体</a></li>
<li><a href="#%E6%B2%A1%E6%9C%89%E7%A9%BA%E8%A1%8C">没有空行</a></li>
<li><a href="#%E6%9C%89%E7%A9%BA%E8%A1%8C">有空行</a></li>
<li><a href="#%E6%AE%B5%E5%86%85%E6%8D%A2%E8%A1%8C">段内换行</a></li>
<li><a href="#%E7%A9%BA%E8%A1%8C">空行</a></li>
<li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">有序列表</a></li>
<li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8">无序列表</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%98%9F%E5%8F%B7">使用星号</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%8F%B7">使用加号</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%87%8F%E5%8F%B7">使用减号</a></li>
</ul>
</li>
<li><a href="#%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8">嵌套列表</a></li>
<li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8%E4%B8%8E%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E7%9B%B8%E4%BA%92%E5%B5%8C%E5%A5%97">有序列表与无序列表相互嵌套</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90">推荐</a></li>
<li><a href="#%E4%B8%8D%E6%8E%A8%E8%8D%90">不推荐</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90-2">推荐</a></li>
<li><a href="#%E4%B8%8D%E6%8E%A8%E8%8D%90-2">不推荐</a></li>
<li><a href="#%E5%88%86%E9%9A%94%E7%BA%BF">分隔线</a>
<ul>
<li><a href="#%E6%98%9F%E5%8F%B7">星号</a></li>
<li><a href="#%E5%87%8F%E5%8F%B7">减号</a></li>
<li><a href="#%E4%B8%8B%E5%88%92%E7%BA%BF">下划线</a></li>
</ul>
</li>
<li><a href="#%E5%9B%BE%E7%89%87">图片</a>
<ul>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E5%9B%BE%E7%89%87%E6%9B%BF%E4%BB%A3%E6%96%87%E5%AD%97">本地图片:无图片替代文字</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%9C%89%E5%9B%BE%E7%89%87%E6%9B%BF%E4%BB%A3%E6%96%87%E5%AD%97">本地图片:有图片替代文字</a></li>
</ul>
</li>
<li><a href="#%E9%93%BE%E6%8E%A5">链接</a>
<ul>
<li><a href="#%E6%96%87%E5%AD%97%E9%93%BE%E6%8E%A5">文字链接</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E9%93%BE%E6%8E%A5">引用链接</a></li>
<li><a href="#%E7%BD%91%E5%9D%80%E9%93%BE%E6%8E%A5">网址链接</a></li>
</ul>
</li>
<li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97">行内代码与代码块</a>
<ul>
<li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81">行内代码</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块</a></li>
</ul>
</li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a>
<ul>
<li><a href="#%E5%A4%9A%E8%A1%8C%E5%BC%95%E7%94%A8">多行引用</a></li>
<li><a href="#%E5%A4%9A%E8%A1%8C%E5%BC%95%E7%94%A8-2">多行引用</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E4%B8%AD%E5%B5%8C%E5%A5%97%E5%BC%95%E7%94%A8">引用中嵌套引用</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96-markdown-%E6%A0%87%E8%AE%B0">引用中使用其他 markdown 标记</a></li>
</ul>
</li>
<li><a href="#%E8%BD%AC%E4%B9%89">转义</a></li>
<li><a href="#%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95">扩展语法</a>
<ul>
<li><a href="#%E5%88%A0%E9%99%A4%E7%BA%BF">删除线</a></li>
<li><a href="#%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7">表情符号</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E9%93%BE%E6%8E%A5">自动链接</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC">表格</a>
<ul>
<li><a href="#%E8%A1%A8%E6%A0%BC%E6%A0%BC%E5%BC%8F">表格格式</a></li>
<li><a href="#%E5%AF%B9%E9%BD%90%E6%A0%BC%E5%BC%8F">对齐格式</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC%E5%86%85%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E6%A0%87%E8%AE%B0">表格内使用其他标记</a></li>
</ul>
</li>
<li><a href="#%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8">任务列表</a></li>
<li><a href="#%E5%9B%B4%E6%A0%8F%E4%BB%A3%E7%A0%81%E5%9D%97">围栏代码块</a></li>
<li><a href="#%E9%94%9A%E7%82%B9">锚点</a></li>
<li><a href="#%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93-%E5%A4%A7%E5%B0%8F-%E9%A2%9C%E8%89%B2">更改字体、大小、颜色</a></li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a></li>
<li><a href="#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">数学公式</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E6%96%87%E4%BB%B6">引用文件</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87">引用图片</a></li>
<li><a href="#%E5%B9%BB%E7%81%AF%E7%89%87">幻灯片</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="这是一级标题"><a class="markdownIt-Anchor" href="#这是一级标题"></a> 这是一级标题</h1>
<h2 id="这是二级标题"><a class="markdownIt-Anchor" href="#这是二级标题"></a> 这是二级标题</h2>
<h3 id="这是三级标题"><a class="markdownIt-Anchor" href="#这是三级标题"></a> 这是三级标题</h3>
<h4 id="这是四级标题"><a class="markdownIt-Anchor" href="#这是四级标题"></a> 这是四级标题</h4>
<h5 id="这是五级标题"><a class="markdownIt-Anchor" href="#这是五级标题"></a> 这是五级标题</h5>
<h6 id="这是六级标题"><a class="markdownIt-Anchor" href="#这是六级标题"></a> 这是六级标题</h6>
<h1 id="这也是一级标题"><a class="markdownIt-Anchor" href="#这也是一级标题"></a> 这也是一级标题</h1>
<p>这也是二级标题(三个减号)</p>
<h1 id="文档标题"><a class="markdownIt-Anchor" href="#文档标题"></a> 文档标题</h1>
<p>作者</p>
<p>摘要</p>
<p>目录</p>
<h2 id="标题1"><a class="markdownIt-Anchor" href="#标题1"></a> 标题1</h2>
<h3 id="标题11"><a class="markdownIt-Anchor" href="#标题11"></a> 标题1.1</h3>
<h2 id="标题2"><a class="markdownIt-Anchor" href="#标题2"></a> 标题2</h2>
<h3 id="标题21"><a class="markdownIt-Anchor" href="#标题21"></a> 标题2.1</h3>
<h3 id="标题22"><a class="markdownIt-Anchor" href="#标题22"></a> 标题2.2</h3>
<h2 id="粗体"><a class="markdownIt-Anchor" href="#粗体"></a> 粗体</h2>
<p>我是<strong>粗体</strong></p>
<p>我也是 <strong>粗体</strong></p>
<h2 id="斜体"><a class="markdownIt-Anchor" href="#斜体"></a> 斜体</h2>
<p>我是<em>斜体</em></p>
<p>我也是 <em>斜体</em></p>
<h2 id="没有空行"><a class="markdownIt-Anchor" href="#没有空行"></a> 没有空行</h2>
<p>我是第一行
我是第二行</p>
<h2 id="有空行"><a class="markdownIt-Anchor" href="#有空行"></a> 有空行</h2>
<p>我是第一行</p>
<p>我是第二行</p>
<h2 id="段内换行"><a class="markdownIt-Anchor" href="#段内换行"></a> 段内换行</h2>
<p>我是第一行，如果想段内换行需要在结尾插入两个以上的空格<br>
我是第二行</p>
<h2 id="空行"><a class="markdownIt-Anchor" href="#空行"></a> 空行</h2>
<p>空行符&lt;br&gt;</p>
<p>大家好，本文参考的是:
<a href="https://github.com/google/styleguide/blog/gh-pages/docguide/style.md">Google Markdown Style Guide</a></p>
<p>大家好，本文参考的是：<a href="https://github.com/google/styleguide/blog/gh-pages/docguide/style.md">Google Markdown Style Guide</a></p>
<h2 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h2>
<ol>
<li>我有一个梦想</li>
<li>我有两个梦想</li>
<li>我有三个梦想</li>
</ol>
<h2 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h2>
<h3 id="使用星号"><a class="markdownIt-Anchor" href="#使用星号"></a> 使用星号</h3>
<ul>
<li>使用【星号】标识无序列表</li>
<li>使用【星号】标识无序列表</li>
<li>使用【星号】标识无序列表</li>
</ul>
<h3 id="使用加号"><a class="markdownIt-Anchor" href="#使用加号"></a> 使用加号</h3>
<ul>
<li>使用【加号】标识无序列表</li>
<li>使用【加号】标识无序列表</li>
<li>使用【加号】标识无序列表</li>
</ul>
<h3 id="使用减号"><a class="markdownIt-Anchor" href="#使用减号"></a> 使用减号</h3>
<ul>
<li>使用【减号】标识无序列表</li>
<li>使用【减号】标识无序列表</li>
<li>使用【减号】标识无序列表</li>
</ul>
<h2 id="嵌套列表"><a class="markdownIt-Anchor" href="#嵌套列表"></a> 嵌套列表</h2>
<ul>
<li>这是第一层列表
<ul>
<li>这是第二层列表
<ul>
<li>这是第三层列表
<ul>
<li>这是第四层列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="有序列表与无序列表相互嵌套"><a class="markdownIt-Anchor" href="#有序列表与无序列表相互嵌套"></a> 有序列表与无序列表相互嵌套</h2>
<ol>
<li>我是一层列表
<ul>
<li>我是二层列表
<ol>
<li>我是三层列表</li>
<li>我也是三层列表</li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li>
<p>这个列表项<br>
有换行</p>
</li>
<li>
<p>这个没有</p>
</li>
</ul>
<ol>
<li>
<p>这个有序列表项<br>
有换行</p>
</li>
<li>
<p>这个没有</p>
</li>
</ol>
<ul>
<li>抽烟</li>
<li>喝酒</li>
<li>烫头</li>
</ul>
<h2 id="推荐"><a class="markdownIt-Anchor" href="#推荐"></a> 推荐</h2>
<ul>
<li>
<p>抽很多的<br>
烟</p>
</li>
<li>
<p>喝酒</p>
</li>
<li>
<p>烫头</p>
</li>
</ul>
<h2 id="不推荐"><a class="markdownIt-Anchor" href="#不推荐"></a> 不推荐</h2>
<ul>
<li>抽很多的<br>
烟</li>
<li>喝酒</li>
<li>烫头</li>
</ul>
<h2 id="推荐-2"><a class="markdownIt-Anchor" href="#推荐-2"></a> 推荐</h2>
<p>我的爱好</p>
<ul>
<li>抽烟</li>
<li>喝酒</li>
<li>烫头</li>
</ul>
<p>跟于老师是一样的</p>
<h2 id="不推荐-2"><a class="markdownIt-Anchor" href="#不推荐-2"></a> 不推荐</h2>
<p>我的爱好</p>
<ul>
<li>抽烟</li>
<li>喝酒</li>
<li>烫头
跟于老师是一样的</li>
</ul>
<h2 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h2>
<h3 id="星号"><a class="markdownIt-Anchor" href="#星号"></a> 星号</h3>
<hr>
<hr>
<hr>
<h3 id="减号"><a class="markdownIt-Anchor" href="#减号"></a> 减号</h3>
<hr>
<hr>
<hr>
<h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3>
<hr>
<hr>
<hr>
<h2 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h2>
<h3 id="本地图片无图片替代文字"><a class="markdownIt-Anchor" href="#本地图片无图片替代文字"></a> 本地图片:无图片替代文字</h3>
<p><img src="/blog/blog/2022/04/12/e8e3b494/example.jpg" alt></p>
<h3 id="本地图片有图片替代文字"><a class="markdownIt-Anchor" href="#本地图片有图片替代文字"></a> 本地图片:有图片替代文字</h3>
<p><img src="/blog/blog/2022/04/12/e8e3b494/example.jpg" alt="本地图片"></p>
<h2 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h2>
<h3 id="文字链接"><a class="markdownIt-Anchor" href="#文字链接"></a> 文字链接</h3>
<p>在日常工作中我们经常使用的网址有<a href="https://www.google.com/">Google</a>、<a href="https://github.com/">Github</a>和<a href="https://stackoverflow.com/?utm_source=rss&amp;utm_medium=rss">Stack overflow</a></p>
<h3 id="引用链接"><a class="markdownIt-Anchor" href="#引用链接"></a> 引用链接</h3>
<p>在日常工作中我们经常使用的网址有<a href="https://www.google.com/">Google</a>、<a href="https://github.com/">Github</a>和<a href="https://stackoverflow.com/?utm_source=rss&amp;utm_medium=rss">Stack overflow</a></p>
<p>在正文中引用链接标记，可以理解为引用定义好的变量：</p>
<p><a href="https://www.google.com/">谷歌官网</a></p>
<p>在底部定义链接标记，可以理解为定义一个地址变量：</p>
<h3 id="网址链接"><a class="markdownIt-Anchor" href="#网址链接"></a> 网址链接</h3>
<p><a href="https://www.google.com/">https://www.google.com/</a></p>
<p><a href="mailto:wirelessqa@163.com">wirelessqa@163.com</a></p>
<h2 id="行内代码与代码块"><a class="markdownIt-Anchor" href="#行内代码与代码块"></a> 行内代码与代码块</h2>
<h3 id="行内代码"><a class="markdownIt-Anchor" href="#行内代码"></a> 行内代码</h3>
<p>使用<sub>cd…</sub>命令切换到上一级目录。</p>
<p>这是一个<sub>行内代码</sub></p>
<p><sub>行内代码不能有空格</sub></p>
<h3 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h3>
<p>以Tab键开头：</p>
<pre><code class="hljs">This_is_a_code_bkock()
</code></pre>
<p>或者以4个空格开头：</p>
<pre><code class="hljs">This_is_a_code_block()
</code></pre>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME <span class="hljs-string">&quot;WuWangwang&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADDR <span class="hljs-string">&quot;An Shun, Gui Zhou&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name: %s\n&quot;</span>,NAME);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address: %s\n&quot;</span>,ADDR);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<pre><code class="hljs">#include&lt;stdio.h&gt;
#define NAME &quot;WuWangwang&quot;
#define ADDR &quot;An Shun, Gui Zhou&quot;

int main()
&#123;
    printf(&quot;Name: %s\n&quot;,NAME);
    printf(&quot;Address: %s\n&quot;,ADDR);

    return 0;
&#125;
</code></pre>
<h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2>
<blockquote>
<p>我是引用的句子，请在我的前面加上&gt;(大于号)</p>
</blockquote>
<p>正常的句子是这样的</p>
<h3 id="多行引用"><a class="markdownIt-Anchor" href="#多行引用"></a> 多行引用</h3>
<blockquote>
<p>这是多行引用的第一行，我的最后有两个空格。<br>
这是多行引用的第二行</p>
</blockquote>
<h3 id="多行引用-2"><a class="markdownIt-Anchor" href="#多行引用-2"></a> 多行引用</h3>
<blockquote>
<p>这是多行引用的第一行</p>
<p>这是多行引用的第二行</p>
</blockquote>
<h3 id="引用中嵌套引用"><a class="markdownIt-Anchor" href="#引用中嵌套引用"></a> 引用中嵌套引用</h3>
<blockquote>
<p>引用中是可以嵌套引用的</p>
<blockquote>
<p>我是引用中嵌套的引用</p>
</blockquote>
</blockquote>
<h3 id="引用中使用其他-markdown-标记"><a class="markdownIt-Anchor" href="#引用中使用其他-markdown-标记"></a> 引用中使用其他 markdown 标记</h3>
<blockquote>
<p>来点击查看我的<a href="http://www.weibo.com">微博</a>
<strong>加粗</strong>和<em>斜体</em>也是支持的。</p>
</blockquote>
<h2 id="转义"><a class="markdownIt-Anchor" href="#转义"></a> 转义</h2>
<p>\
*
#
+
-
.
!
~
_
{}
[]
()</p>
<h2 id="扩展语法"><a class="markdownIt-Anchor" href="#扩展语法"></a> 扩展语法</h2>
<h3 id="删除线"><a class="markdownIt-Anchor" href="#删除线"></a> 删除线</h3>
<p>这是<s>删除线</s></p>
<p>这是<s>删除线删除线<br>
删除线删除线</s></p>
<h3 id="表情符号"><a class="markdownIt-Anchor" href="#表情符号"></a> 表情符号</h3>
<p>😄
😆
👍
👎
👏
😧
😙</p>
<p>更多的表情符号请参考<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/">http://www.webpagefx.com/tools/emoji-cheat-sheet/</a></p>
<h3 id="自动链接"><a class="markdownIt-Anchor" href="#自动链接"></a> 自动链接</h3>
<p>标准语法中由 &lt;&gt; 包裹的 URL 地址被自动识别并解析为超链接。</p>
<p>如：</p>
<p><a href="http://www.baidu.com">http://www.baidu.com</a></p>
<p>使用 GFM 扩展语法可以不使用 &lt;&gt; 包裹</p>
<p>如：</p>
<p>www.baidu.com</p>
<p>http://baidu.com</p>
<p>http://www.baidu.com</p>
<h3 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h3>
<h4 id="表格格式"><a class="markdownIt-Anchor" href="#表格格式"></a> 表格格式</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>标题</th>
<th>网址</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>博客</td>
<td>http://blog.csdn.net/wirelessqa</td>
</tr>
<tr>
<td>02</td>
<td>微博</td>
<td>http://www.weibo.com/wirelessqa</td>
</tr>
</tbody>
</table>
<h4 id="对齐格式"><a class="markdownIt-Anchor" href="#对齐格式"></a> 对齐格式</h4>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:center">居中对齐</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">01</td>
<td style="text-align:center">博客</td>
<td style="text-align:right">http://blog.csdn.net/wirelessqa</td>
</tr>
<tr>
<td style="text-align:left">02</td>
<td style="text-align:center">微博</td>
<td style="text-align:right">http://www.weibo.com/wirelessqa</td>
</tr>
</tbody>
</table>
<h4 id="表格内使用其他标记"><a class="markdownIt-Anchor" href="#表格内使用其他标记"></a> 表格内使用其他标记</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>标题</th>
<th>网址</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>01</em></td>
<td><a href="http://blog.csdn.net/wirelessqa">博客</a></td>
<td>http://blog.csdn.net/wirelessqa</td>
</tr>
<tr>
<td><strong>02</strong></td>
<td><a href="http://www.weibo.com/wirelessqa">微博</a></td>
<td>http://www.weibo.com/wirelessqa</td>
</tr>
</tbody>
</table>
<p>人员列表：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
</tr>
</tbody>
</table>
<p>好多熟悉的名字</p>
<h3 id="任务列表"><a class="markdownIt-Anchor" href="#任务列表"></a> 任务列表</h3>
<p>今日工作：</p>
<ul>
<li>[x] 吃</li>
<li>[x] 喝</li>
<li>[ ] 玩</li>
</ul>
<p>明日计划：</p>
<ul>
<li>[ ] 吃
<ul>
<li>[ ] 吃鱼</li>
<li>[ ] 吃瓜</li>
</ul>
</li>
<li>[x] 睡</li>
</ul>
<h3 id="围栏代码块"><a class="markdownIt-Anchor" href="#围栏代码块"></a> 围栏代码块</h3>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_print</span>():<br>    pass<br></code></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_print</span>():<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>
<p>进入C语言代码块：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>优秀！</p>
<h3 id="锚点"><a class="markdownIt-Anchor" href="#锚点"></a> 锚点</h3>
<p>目录</p>
<ul>
<li><a href="#%E5%AF%B9%E9%BD%90%E6%A0%BC%E5%BC%8F">对齐格式</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC%E5%86%85%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E6%A0%87%E8%AE%B0">表格内使用其他标记</a></li>
</ul>
<h3 id="更改字体-大小-颜色"><a class="markdownIt-Anchor" href="#更改字体-大小-颜色"></a> 更改字体、大小、颜色</h3>
<p><font face="黑体">我是黑体</font></p>
<p><font face="STCAIYUN">我是华文彩云</font></p>
<p><font face="微软雅黑">我是微软雅黑</font></p>
<p><font color="red">我是红色</font></p>
<p><font color="#008000">我是绿色</font></p>
<p><font color="Blue">我是蓝色</font></p>
<p><font size="5">我是尺寸</font></p>
<p><font face="华文彩云" color="purple" size="5">我是华文彩云，蓝色，字号为5</font></p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<ul>
<li>分页</li>
</ul>
<p>在需要分页的地方插入以下代码：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> style=<span class="hljs-string">&quot;page-break-after:always;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure>
<p>分页效果在导出的PDF文件中体现。</p>
<h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3>
<p>快捷键：Ctrl + M</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2+b^2=c^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<h3 id="引用文件"><a class="markdownIt-Anchor" href="#引用文件"></a> 引用文件</h3>
<blockquote>
<p>@import &quot;文件名</p>
</blockquote>
<blockquote>
<p>&lt;!-- @import “文件名” --&gt;</p>
</blockquote>
<p>以下是文件引用:
@import “pasteimage.md”</p>
<p>文件引用到此结束</p>
<hr>
<p>@import “https://github.com/kennethreitz/responder/blod/master/README.md”</p>
<h3 id="引用图片"><a class="markdownIt-Anchor" href="#引用图片"></a> 引用图片</h3>
<ul>
<li>
<p>直接引用图片
@import “picture/exp11.png”</p>
</li>
<li>
<p>在引用图片的同时设置图片的大小(好像没用。。。尴尬。)
@import “picture/example.jpg” (width=“10px” height=“20px” title=“哈哈哈” alt=“这是哈哈哈哈哈哈”)</p>
</li>
</ul>
<h3 id="幻灯片"><a class="markdownIt-Anchor" href="#幻灯片"></a> 幻灯片</h3>
<blockquote>
<!-- slide -->
<h1 id="第-1-页"><a class="markdownIt-Anchor" href="#第-1-页"></a> 第 1 页</h1>
<p>猜猜我是谁？</p>
<!-- slide -->
<h1 id="第-2-页"><a class="markdownIt-Anchor" href="#第-2-页"></a> 第 2 页</h1>
<p><img src="/blog/blog/2022/04/12/e8e3b494/example.jpg" alt>
哈哈哈哈哈，我 giao！</p>
</blockquote>
<center><font face="黑体" color="black" size="4">----------------- END -----------------</font></center>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
  </entry>
</search>
